init.clust.mn.pr = function(theta, range = length(theta)-1, iters = 1e4){

  dta = vector('list', iters)
  dta.mn = vector('list', iters)
  dta.bic = vector('numeric', iters)
  for(i in 1:iters){
    tmp.dta = theta;
    if(length(range)>1){num.c = sample(range,1)}else{num.c = range}
    tmp.res = stats::kmeans(tmp.dta, num.c);
    dta[[i]] = tmp.res$cluster;
    dta.mn[[i]] = as.numeric(tmp.res$centers);
    dta.bic[i] = kmeansBIC(tmp.res)
  }
  mx = which.min(dta.bic);
  num.c = length(unique(dta[[mx]]));
  tmp.mn = as.numeric(dta.mn[[mx]]);
  tmp.clust = dta[[mx]];

  m = length(theta);
  tmp.dta = sample(theta, m);
  tmp.res = stats::kmeans(tmp.dta, num.c);
  tmp.pr = table(tmp.res$cluster);

  for(i in 1:(iters-1)){
    tmp.dta = sample(theta, m);
    tmp.res = stats::kmeans(tmp.dta, num.c);
    tmp.pr =  tmp.pr + table(tmp.res$cluster);
  }
  tmp.pr =  tmp.pr/(m*iters)

  return(list(tmp.clust, tmp.mn, tmp.pr))
}
