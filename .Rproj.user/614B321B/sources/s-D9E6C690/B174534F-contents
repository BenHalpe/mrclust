clust.prob = function(bic.clust, clust.mn, clust.pi, theta, theta.sd, junk.mixture = FALSE, df, junk.mean = NULL, junk.sd = NULL,
                      null.mixture = FALSE, null.mean = NULL, null.sd = NULL, obs.names, clust.size.prior = FALSE, prior = NULL){

  if(!clust.size.prior){
    mx = which.min(bic.clust);
  }else{
    m = length(theta);
    pr = stats::dbinom(1:m, m, prior);
    pr = pr[1:length(bic.clust)]/sum(pr[1:length(bic.clust)]);
    mx = which.max(exp(-bic.clust/2)*pr);
  }
  theta.mn = clust.mn[[mx]];
  clust.probs = clust.pi[[mx]];
  n.clust = length(theta.mn);
  m = length(theta);
  res1 = round(as.numeric(t(rij(1:m, 1:n.clust, clust.probs, theta, theta.sd, theta.mn, junk.mixture, df, junk.mean, junk.sd,
                                null.mixture, null.mean, null.sd))),3);
  res2 = round(rep(theta.mn, m),3);
  res = data.table::data.table(rep( obs.names, each = n.clust), rep(1:n.clust, m), res1, res2, rep( theta, each = n.clust), rep( theta.sd, each = n.clust))
  names(res) = c("observation", "cluster", "probability", "cluster_mean", "theta", "theta.se");
  factor.clust = res$cluster;
  if(null.mixture & !junk.mixture){
    tmp = res$cluster == n.clust;
    factor.clust[tmp] = "Null";
  }else if(null.mixture & junk.mixture){
    tmp = res$cluster == n.clust-1;
    factor.clust[tmp] = "Null";
  }
  if(junk.mixture){
    tmp = res$cluster == n.clust;
    factor.clust[tmp] = "Junk";
  }
  res$cluster.class = as.character(factor.clust);
  return(res)
}
